const fs = require('fs');
const path = require('path');
const tokenizing =  require('./tokenization.js');

/* need to install these */
const { DOMParser } = require('xmldom');


const queryFile = path.join(__dirname, '../queryFiles/cfquery.xml');


async function readQueryXML(){

  // convert xml to String
  const queryFileString = fs.readFileSync(queryFile, 'utf8');

  // read xmlstring
  const doc = new DOMParser().parseFromString(queryFileString);

  // get every Query tag
  const QUERIES = doc.getElementsByTagName('QUERY');

  let result = {};

  try {
    // console.log('there are many Queries', Object.keys(QUERIES).length);
    result = await readQuery(QUERIES);
  } catch (error) {
    console.log(error);
  }

  return result;
}

let autogenerated = 0;

/*
const allQueries = {
  "id" = {
    "text":,
    "expected":[]
  }
};
*/
const allQueries = {};

/*
* Parse and Extract meaningful information
*/
async function readQuery(QUERIES){
  console.log('start to read all Queries in function');
  for(let index =  0; index < QUERIES.length; index++){
    const expected = [];

    // get queryNumber
    const QueryNumber = QUERIES[index].getElementsByTagName('QueryNumber')[0];
    const query_id = (QueryNumber == undefined) ? autogenerated:QueryNumber.childNodes[0].data;
    autogenerated++;

    // get queryText
    const QueryText = QUERIES[index].getElementsByTagName('QueryText')[0];
    const rawText = (QueryText == undefined) ? "": QueryText.childNodes[0].data;

    // get all items in each query
    const items = await QUERIES[index].getElementsByTagName('Item');
    // store each item in the an arr, which will be stored later
    for (let i = 0; i < items.length;i++){
      let item = parseInt(items[i].textContent);
      expected.push(item);
    }

    allQueries[query_id] = new Object();
    allQueries[query_id].id = query_id;
    allQueries[query_id].text = rawText;
    allQueries[query_id].expected = expected;
  }
  return allQueries;
}




module.exports = {
  readQueryXML, allQueries
}
